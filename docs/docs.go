// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag at
// 2020-05-29 00:04:18.6271 +1000 AEST m=+0.038946450

package docs

import (
	"bytes"
	"encoding/json"
	"strings"

	"github.com/alecthomas/template"
	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{.Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "email": "fiber@swagger.io"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/convert/{price}/{toCurrency}/{date}": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Show price From one currency value to another specified currency value",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Current Price (e.g. 50USD)",
                        "name": "price",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "New Currency to convert price value to",
                        "name": "toCurrency",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Currency conversion timestamp history",
                        "name": "date",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/main.JsonResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/main.JsonErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/main.JsonErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/main.JsonErrorResponse"
                        }
                    }
                }
            }
        },
        "/currencies": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "summary": "Returns all currencies and countries recognized.",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/main.CurrenciesResponse"
                        }
                    }
                }
            }
        },
        "/fair/{locPrice}/{countryCode}/{currency}": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Show price in a local price of a given currency",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Current Local Price",
                        "name": "locPrice",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Country Code to convert to",
                        "name": "countryCode",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Currency to convert to",
                        "name": "currency",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/main.JsonResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/main.JsonErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/main.JsonErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/main.JsonErrorResponse"
                        }
                    }
                }
            }
        },
        "/rates/{base}/{date}": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "List Currency conversion rates for specified currencies.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Base currency to convert from to fetch other currency rates",
                        "name": "base",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Currency conversion timestamp history",
                        "name": "date",
                        "in": "path"
                    },
                    {
                        "type": "string",
                        "description": "list of comma separated currencies to List in output",
                        "name": "currencies",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/main.JsonResponse"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/main.JsonErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/main.JsonErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/main.JsonErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "main.ApiError": {
            "type": "object",
            "properties": {
                "status": {
                    "type": "integer"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "main.CurrenciesResponse": {
            "type": "object",
            "properties": {
                "currencies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/main.Currency"
                    }
                }
            }
        },
        "main.Currency": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "main.JsonErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "object",
                    "$ref": "#/definitions/main.ApiError"
                }
            }
        },
        "main.JsonResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "object"
                },
                "meta": {
                    "description": "Reserved field to add some meta information to the API response",
                    "type": "object"
                }
            }
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "1.0",
	Host:        "",
	BasePath:    "/",
	Schemes:     []string{},
	Title:       "Fiber Example API",
	Description: "This is a sample swagger for Fiber",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register(swag.Name, &s{})
}
